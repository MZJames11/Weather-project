Overview:
This website allows users to enter a city name and retrieve real-time weather information using the OpenWeather API.
Users can view the current temperature, weather description, and a weather icon.
The temperature can be toggled between Celsius and Fahrenheit.
The background color dynamically changes based on the weather condition, and hovering over the weather icon shows a tooltip.

Model / View / Controller Descriptions:

Model:
Stores the current city name, weather data, and temperature unit (Celsius/Fahrenheit).
Provides methods to retrieve, format, and toggle the weather information.
Handles temperature conversion between Celsius and Fahrenheit.
Constructs URLs for fetching weather icons.

View:
Updates the webpage by displaying the city name, temperature, weather description, and icon.
Changes the background color according to the weather condition (rainy, cloudy, sunny, etc.).
Provides visual feedback when hovering over the weather icon.

Controller:
Handles user interactions such as fetching weather data and toggling the temperature unit.
Reads user input from the HTML input field.
Coordinates between the Model and the View to update the webpage dynamically.

Class-Based Diagrams:

Model
-----
- city: String
- weatherData: Object
- useCelsius: Boolean
- setCity(newCity)
- setWeatherData(data)
- toggleUnit()
- getTemperature()
- getDescription()
- getIcon()

View
----
- updateWeatherDisplay()

Controller
----------
- initialize()
- fetchWeather()
- toggleTemperatureUnit()

Control-Flow Pseudocode:

Event 1: Page Load (window.onload → controller.initialize)
- controller.initialize()
    - model.setCity('')
    - model.setWeatherData(null)
    - view.updateWeatherDisplay()

Event 2: User Clicks "Get Weather" Button
- controller.fetchWeather()
    - read cityInput from HTML
    - model.setCity(cityInput)
    - fetch weather data from OpenWeather API
    - if data valid:
        - model.setWeatherData(data)
        - view.updateWeatherDisplay()

Event 3: User Clicks "Toggle °C/°F" Button
- controller.toggleTemperatureUnit()
    - model.toggleUnit()
    - view.updateWeatherDisplay()
